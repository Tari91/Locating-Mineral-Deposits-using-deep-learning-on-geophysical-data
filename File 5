import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset, random_split
import numpy as np
import matplotlib.pyplot as plt

# 1. Generate synthetic geophysical data
def generate_synthetic_data(n_samples=1000, grid_size=32):
    data = []
    labels = []
    for _ in range(n_samples):
        grid = np.random.normal(0, 1, (grid_size, grid_size))
        
        # Simulate mineral deposit as a circular anomaly
        if np.random.rand() > 0.5:
            cx, cy = np.random.randint(8, 24, size=2)
            for x in range(grid_size):
                for y in range(grid_size):
                    if (x - cx)**2 + (y - cy)**2 < 25:
                        grid[x, y] += np.random.uniform(5, 10)
            labels.append(1)  # Mineral deposit present
        else:
            labels.append(0)  # No deposit

        data.append(grid)
    
    data = np.array(data).astype(np.float32)
    labels = np.array(labels).astype(np.int64)
    return data, labels

# 2. Prepare data
X, y = generate_synthetic_data()
X = X[:, None, :, :]  # Add channel dimension for CNN: (N, C, H, W)

dataset = TensorDataset(torch.tensor(X), torch.tensor(y))
train_size = int(0.8 * len(dataset))
train_set, test_set = random_split(dataset, [train_size, len(dataset) - train_size])
train_loader = DataLoader(train_set, batch_size=32, shuffle=True)
test_loader = DataLoader(test_set, batch_size=32)

# 3. Define CNN model
class MineralCNN(nn.Module):
    def __init__(self):
        super(MineralCNN, self).__init__()
        self.conv_layers = nn.Sequential(
            nn.Conv2d(1, 16, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2),  # 16x16
            nn.Conv2d(16, 32, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2),  # 8x8
        )
        self.fc_layers = nn.Sequential(
            nn.Flatten(),
            nn.Linear(32 * 8 * 8, 64),
            nn.ReLU(),
            nn.Linear(64, 2)  # Binary classification
        )
    
    def forward(self, x):
        x = self.conv_layers(x)
        return self.fc_layers(x)

# 4. Train model
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = MineralCNN().to(device)
loss_fn = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

for epoch in range(10):
    model.train()
    total_loss = 0
    for batch_X, batch_y in train_loader:
        batch_X, batch_y = batch_X.to(device), batch_y.to(device)
        optimizer.zero_grad()
        outputs = model(batch_X)
        loss = loss_fn(outputs, batch_y)
        loss.backward()
        optimizer.step()
        total_loss += loss.item()
    print(f"Epoch {epoch+1}, Loss: {total_loss / len(train_loader):.4f}")

# 5. Evaluate model
model.eval()
correct = total = 0
with torch.no_grad():
    for batch_X, batch_y in test_loader:
        batch_X, batch_y = batch_X.to(device), batch_y.to(device)
        outputs = model(batch_X)
        preds = torch.argmax(outputs, dim=1)
        correct += (preds == batch_y).sum().item()
        total += batch_y.size(0)

print(f"Test Accuracy: {correct / total * 100:.2f}%")

